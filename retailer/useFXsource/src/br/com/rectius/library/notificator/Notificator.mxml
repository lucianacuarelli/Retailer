<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:assets="br.com.rectius.library.notificator.assets.*"
		 width="300" height="60" buttonMode="true">
	<fx:Script>
		<![CDATA[
			import spark.filters.BlurFilter;
		]]>
	</fx:Script>
	
	<!--States-->
	<s:states>
		<s:State name="warning"/>
		<s:State name="success"/>
		<s:State name="failure"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import devdoo.fx.UseAnimate;
			import mx.managers.PopUpManager;
			
			//--------------------------------------------------------------------------
			//
			//  Properties
			//
			//--------------------------------------------------------------------------
			
			//----------------------------------
			//  indexStart
			//----------------------------------
			private var _indexStart:Number;
			
			/**
			 * Indica a posição incial do componente na lista
			 */
			public function get indexStart():Number
			{
				return _indexStart;
			}
			
			/**
			 * @private
			 */
			public function set indexStart(value:Number):void
			{
				_indexStart = value;
			}
			
			
			//----------------------------------
			//  indexEnd
			//----------------------------------
			private var _indexEnd:Number;
			
			/**
			 * Indica a posição final do componente na lista
			 */
			public function get indexEnd():Number
			{
				return _indexEnd;
			}
			
			/**
			 * @private
			 */
			public function set indexEnd(value:Number):void
			{
				_indexEnd = value;
			}
			
			//----------------------------------
			//  notificatorTimer
			//----------------------------------
			
			/**
			 *  @private
			 */
			public var notificatorTimer:Timer;
			
			//----------------------------------
			//  message
			//----------------------------------
			
			[Bindable]
			
			/**
			 *  The string that defines the 
			 *  notification message.
			 *
			 *  @langversion 3.0
			 *  @playerversion Flash 10
			 *  @playerversion AIR 1.5
			 *  @productversion Flex 4
			 */
			public var message:String;
			
			//----------------------------------
			//  timeDestroy
			//----------------------------------
			
			[Bindable]
			
			/**
			 *  The milliseconds interval that 
			 *  the notification message will be 
			 *  visible.
			 *
			 *  @langversion 3.0
			 *  @playerversion Flash 10
			 *  @playerversion AIR 1.5
			 *  @productversion Flex 4
			 */
			public var timeDestroy:Number = 4000;
			
			//--------------------------------------------------------------------------
			//
			//  Private methods
			//
			//--------------------------------------------------------------------------
			
			/**
			 *  @private
			 *  Recalculates the positioning of the component.
			 * 
			 *  @langversion 3.0
			 *  @playerversion Flash 10
			 *  @playerversion AIR 1.5
			 *  @productversion Flex 4
			 */
			private function positioning():void
			{
				// positioning the component
				//this.x = (this.parentApplication.width / 2) - (this.width / 2);
				this.x = (this.parentApplication.width) - (this.width);
				this.y = (-this.contentHeight);
				UseAnimate.moveItem(this, (-this.height), (NotificatorManager.totalItems() * (this.height)) , this.x, this.x, 200, 0, 1, null, positioningX);
			}
			
			public function positionUpdate():void
			{
				trace(indexStart +'!='+ indexEnd);
				if(indexStart != indexEnd)
					UseAnimate.moveItem(this, indexEnd * (this.height), (indexStart * (this.height)) , this.x, this.x, 400, 1, 1, null, positioningX);
				//notificatorTimer.start();
			}
			
			private function positioningX(event:Event):void
			{
				trace('timeDestroy: '+timeDestroy);
				// sets the timer that controls the notification duration
				notificatorTimer = new Timer(timeDestroy, 1);
				notificatorTimer.addEventListener(TimerEvent.TIMER_COMPLETE, removeNotificator_handler);
				notificatorTimer.start();
				// closes the component instance after a mouse click event
				this.addEventListener(MouseEvent.CLICK, componentClick_handler);
				
				// calculates the new position after resize the parent window
				this.parentApplication.addEventListener(Event.RESIZE, resize_handler);
			}
			
			/**
			 *  @private
			 *  Removes the component of the screen.
			 * 
			 *  @langversion 3.0
			 *  @playerversion Flash 10
			 *  @playerversion AIR 1.5
			 *  @productversion Flex 4
			 */
			private function destroyComponent():void
			{
				UseAnimate.moveItem(this, this.y, (0 - this.contentHeight), this.x, this.x, 500, 1, 0, null, destroyComponentx);
			}
			
			private function destroyComponentx(event:Event):void
			{
				NotificatorManager.hide(this);
				this.parentApplication.removeEventListener(Event.RESIZE, resize_handler);
				notificatorTimer.stop();
				notificatorTimer.addEventListener(TimerEvent.TIMER_COMPLETE, removeNotificator_handler);
				PopUpManager.removePopUp(this);
				
				//trace('destroi: '+ uid);
			}
			
			//--------------------------------------------------------------------------
			//
			//  Handler methods
			//
			//--------------------------------------------------------------------------
			private function resize_handler(event:Event):void
			{
				positioning();
			}
			
			private function removeNotificator_handler(event:TimerEvent):void
			{
				destroyComponent();
			}
			
			private function componentClick_handler(event:MouseEvent):void
			{
				destroyComponent();
			}
			
			//--------------------------------------------------------------------------
			//
			//  Public methods
			//
			//--------------------------------------------------------------------------
			public function show():void 
			{
				// sets the notification position
				positioning();
			}
		]]>
	</fx:Script>
	
	<!--Warning background-->
	<s:Rect left="0" top="0" right="0" bottom="0" includeIn="warning" radiusX="5">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xAE6800" ratio=".2" />
				<s:GradientEntry color="0xFF9900" ratio=".9" />
				<s:GradientEntry color="0xFF9900" ratio=".7" />
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0xcccccc" />
		</s:stroke>
	</s:Rect>
	
	<!--Success background-->
	<s:Rect left="0" top="0" right="0" bottom="0" includeIn="success">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x53674e" />
				<s:GradientEntry color="0xa7cfb0" />
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0xcccccc" />
		</s:stroke>
	</s:Rect>
	
	<!--Failure background-->
	<s:Rect left="0" top="0" right="0" bottom="0" includeIn="failure">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x0" />
				<s:GradientEntry color="0x993300" />
			</s:LinearGradient>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0xcccccc" />
		</s:stroke>
	</s:Rect>
	
	<!--Warning icon-->
	<assets:IconWarning top="5" bottom="5" left="5" includeIn="warning" />
	
	<!--Success icon-->
	<assets:IconSuccess top="5" bottom="5" left="5" includeIn="success" />
	
	<!--Failure icon-->
	<assets:IconFailure top="5" bottom="5" left="5" includeIn="failure" />
	
	<!--Notification message-->
	<s:Label left="60" height="100%" color="#FFFFFF" fontSize="13" fontWeight="bold"
			 styleName="notification" text="{message}" textAlign="left" verticalAlign="middle"
			 width.failure="100%"
			 width.success="100%"
			 left.warning="60" right.warning="0"/>
</s:Group>