<?xml version="1.0" encoding="utf-8"?>
<!--
ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.
-->

<!--- The default skin class for the Spark Button component.  

@see spark.components.Button

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   minWidth="21" minHeight="21" 
				   alpha.disabled="0.5">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[         
			import spark.components.Group;
			/* Define the skin elements that should not be colorized. 
			For button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay", "iconDisplay"];
			
			/** 
			 * @private
			 */     
			override public function get colorizeExclusions():Array {return exclusions;}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}  
			
			/**
			 *  @private
			 */
			[Bindable] private var focusColor:uint;
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
			{
				grDisplay.gap = 0;
				
				
				if(getStyle("icon")){
					grDisplay.addElementAt(iconDisplay,0);
					grDisplay.gap = 5;
				}
				
				useLabelDisplay.text = hostComponent.label;
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private var cornerRadius:Number = 2;
			
		]]>        
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<s:Rect left="0" right="0" top="0" bottom="0" alpha="0.3" radiusX="4">
		<s:fill>
			<s:SolidColor color="#000000"/>
		</s:fill>
		<s:filters>
			<s:BevelFilter angle="270" blurX="1" blurY="1" distance="1"
						   highlightAlpha="0.6" highlightColor="#FFFFFF" knockout="false"
						   quality="2" shadowAlpha="0.2" shadowColor="#000000" strength="1"
						   type="inner"/>
		</s:filters>
	</s:Rect>	
	
	
	
	
	<s:Rect left="3" right="3" top="3" bottom="3" radiusX="4"
			alpha.disabled="0.35" >
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry alpha="1.0" color="0x605445" ratio="0"/>
				<s:GradientEntry alpha="1.0" color="0x403933" ratio="0.5254901960784314"/>
				<s:GradientEntry alpha="1.0" color="0x302B27" ratio="1"/>
			</s:LinearGradient>
		</s:fill>
		<s:filters>
			<s:BevelFilter angle="90" blurX="1" blurY="1" distance="1"
						   highlightAlpha="0.1" highlightColor="#FFFFFF" knockout="false"
						   quality="2" shadowAlpha="0.1" shadowColor="#000000" strength="1"
						   type="inner"/>
			<s:GlowFilter includeIn="over" alpha="0.8" blurX="2" blurY="2" color="#000000"
						  inner="true" knockout="false" quality="2" strength="1"/>
			<s:GlowFilter includeIn="down" alpha="0.5" blurX="2" blurY="2" color="#000000"
						  inner="true" knockout="false" quality="2" strength="1"/>
		</s:filters>
	</s:Rect>
	
	<s:Rect left="3" right="3" top="3" bottom="3" radiusX="4"
			visible.disabled="false"
			visible.over="false"
			visible.up="false">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry alpha="1.0" color="0x605445" ratio="0"/>
				<s:GradientEntry alpha="1.0" color="0x403933" ratio="0.5254901960784314"/>
				<s:GradientEntry alpha="1.0" color="0x302B27" ratio="1"/>
			</s:LinearGradient>
		</s:fill>
		<s:filters>
			<s:BevelFilter angle="90" blurX="1" blurY="1" distance="1"
						   highlightAlpha="0.1" highlightColor="#FFFFFF" knockout="false"
						   quality="2" shadowAlpha="0.1" shadowColor="#000000" strength="1"
						   type="inner"/>
			<s:GlowFilter includeIn="down" alpha="0.6" blurX="2" blurY="2" color="#000000"
						  inner="true" knockout="false" quality="2" strength="1"/>
		</s:filters>
	</s:Rect>	
	
	
	
	<!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
	<s:HGroup id="grDisplay" paddingLeft="5" paddingRight="5" 
			  verticalCenter="1" 
			  verticalCenter.down="2"  top="6" bottom="6" left="10" right="10" verticalAlign="middle">
		
		
		
		<s:Label id="useLabelDisplay" width="100%" horizontalCenter="0" maxDisplayedLines="1"
				 text="Teste de text" textAlign="center" verticalAlign="middle" verticalCenter="0"
				 color="#F0F0F0"
				 color.down="#FFFFFF"
				 color.over="#FFFFFF">
		</s:Label>
	</s:HGroup>
	
	<s:Rect left="4" right="4" bottom="4" height="{(height/2)-4}" height.down="{(height/2)-5}" alpha="0.1" radiusX="0"
			alpha.disabled="0.03"
			y.down="16">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry alpha="1.0" color="#000000" ratio="0.5058823529411764"/>
				<s:GradientEntry alpha="0.0" color="#000000" ratio="1"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
</s:SparkButtonSkin>
