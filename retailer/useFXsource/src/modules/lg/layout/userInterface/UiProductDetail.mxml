<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" creationComplete="create()">
	
	<fx:Metadata>
		[Event(name="filterProduct", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import devdoo.fx.UseArray;
			import devdoo.fx.UseDate;
			import devdoo.fx.UseFX;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			//------------------------------------------------------------------
			//
			//  Constants
			//
			//------------------------------------------------------------------
			//----------------------------------
			// FILTER_PRODUCT
			//----------------------------------
			/**
			 *  A constante UiProductDetail.FILTER_PRODUCT configura o tipo de evento que deve ser monitorado. 
			 */  
			public static const FILTER_PRODUCT:String			= 'filterProduct';	
			
			//------------------------------------------------------------------
			//
			//  Attributes
			//
			//------------------------------------------------------------------
			//----------------------------------
			//  useFX
			//----------------------------------
			/**
			 *  Instância da classe de gerenciamento de módulo.  
			 */  
			public var useFX:UseFX;
			
			//----------------------------------
			//  selectedGroups
			//----------------------------------
			/**
			 *  Prepara filtro para realizar consulta na base de dados,
			 *  retornando somente produtos que esteja dentro dos grupos
			 *  selecionados.
			 * 
			 *  @return void
			 */	
			public function get selectedGroups():String
			{
				//Verifica se tem um grupo selecionado
				if(ddCategory.selectedIndex > -1)
					return ddCategory.selectedItem.id;
				else
					return null;
			}
			
			//----------------------------------
			//  title
			//----------------------------------
			private var _title:String;
			
			/**
			 *  Prepara filtro para realizar consulta na base de dados,
			 *  retornando somente produtos que esteja dentro dos grupos
			 *  selecionados.
			 */
			public function get title():String
			{
				return _title;
			}
			
			//------------------------------------------------------------------
			//
			//  Methods
			//
			//------------------------------------------------------------------
			//----------------------------------
			//  create
			//----------------------------------
			/**
			 *  Evento executado no momento em que a aplicação for criada completamente.
			 *  
			 * @return void  
			 */	
			public function create():void
			{
				//Recupera a instância da classe de gerenciamento da módulo
				useFX = UseFX.start();
			}
			
			//----------------------------------
			//  populateFilter
			//----------------------------------
			/**
			 *  Popula os componentes de filtro de grupos
			 *  @return void  
			 */
			public function populateFilter() : void
			{
				//Popula categoria
				var item:Object = new Object();
				item.id = null;
				item.title = 'Todos';
				
				var arData:Array = UseArray.clone( (UseFX.start().session('lgCategory') as ArrayCollection).source );
				
				var dataProvider:ArrayCollection = new ArrayCollection(arData);
				dataProvider.addItemAt(item, 0);
				
				ddCategory.selectedIndex = -1;
				ddCategory.dataProvider = dataProvider;
				ddCategory.selectedIndex = 0;
			}
			
			//----------------------------------
			//  populate
			//----------------------------------
			/**
			 *  Popula os os dados do componente.
			 * 
			 *  @return void
			 */	
			public function populate(selectedItem:Object):void
			{
				//Popula os dados do produto selecionado
				lbProductTitle.text = selectedItem.USE_LG_PRODUCTS_title;
				lbProductCode.text = selectedItem.USE_LG_PRODUCTS_code;
				lbProductCategory.text = selectedItem.USE_REGISTER_GROUPS_title;
				lbProductSubcategory.text = selectedItem.USE_REGISTER_GROUPS_SUBCATEGORY_title;
				//Data de publicação
				var useDate:UseDate = useFX.date(int(selectedItem.USE_LG_PRODUCTS_date_in))
				lbProductDateIn.text = "Publicado em "+ useDate.format('d/m/Y');
				//Data de término da publicação
				useDate = useFX.date(int(selectedItem.USE_LG_PRODUCTS_date_out));
				lbProductDateOut.text = "Publicado até "+useDate.format('d/m/Y');
				//Data de destaque
				useDate = useFX.date(int(selectedItem.USE_LG_PRODUCTS_highlight_date_out));
				lbProductHighlight.text = "Destaque até "+ useDate.format('d/m/Y');
				//Data de novidade
				useDate = useFX.date(int(selectedItem.USE_LG_PRODUCTS_status_new_date_out));
				lbProductNew.text = "Novo até "+ useDate.format('d/m/Y');
			}
			
			//----------------------------------
			//  reset
			//----------------------------------
			/**
			 *  Limpa os campos de detalhes do produto
			 * 
			 *  @return void
			 */	
			public function reset():void
			{
				lbProductTitle.text = "";
				lbProductCode.text = "";
				lbProductCategory.text = "";
				lbProductSubcategory.text = "";
				lbProductHighlight.text = "";
				lbProductNew.text = "";
				lbProductDateIn.text = "";
				lbProductDateOut.text = "";
			}
			
			//----------------------------------
			//  filterHandler
			//----------------------------------
			/**
			 *  Dispara evento para filtrar produtos por grupo.
			 * 
			 *  @return void
			 */	
			protected function filterHandler(event:IndexChangeEvent):void
			{
				dispatchEvent(new Event('filterProduct'));
			}
			
			//----------------------------------
			//  filterProductName
			//----------------------------------
			/**
			 *  Dispara evento para filtrar produtos por nome.
			 * 
			 *  @return void
			 */	
			protected function filterProductName():void
			{
				this._title = tiProductName.text;
				dispatchEvent(new Event('filterProduct'));
			}
			
			//----------------------------------
			//  clearFilter
			//----------------------------------
			/**
			 *  Dispara evento para filtrar produtos por nome.
			 * 
			 *  @return void
			 */	
			protected function clearFilter():void
			{
				this._title = '';
				tiProductName.text = '';
				ddCategory.selectedIndex = 0;
				dispatchEvent(new Event('filterProduct'));
			}
		]]>
	</fx:Script>
	<s:VGroup width="100%">
		
		<s:HGroup width="100%">
			<!--Informações do Produto-->
			<s:VGroup width="100%">
				<s:Label id="lbProductTitle" fontWeight="bold" fontSize="14" width="160"/>
				<s:Label id="lbProductCode" fontWeight="bold"/>
				<s:Label id="lbProductCategory"/>
				<s:Label id="lbProductSubcategory"/>
				<s:Label id="lbProductHighlight"/>
				<s:Label id="lbProductNew"/>
			</s:VGroup>
			<s:VGroup width="145" height="100%">
				<s:Label id="lbProductDateIn"/>
				<s:Label id="lbProductDateOut"/>
			</s:VGroup>
		</s:HGroup>
		<s:Spacer height="10"/>
		<mx:HRule width="100%"/>
		<s:Spacer height="10"/>
		<s:HGroup width="100%">
			<!--Botão para limpar filtro-->
			<s:VGroup>
				<s:Spacer height="15"/>
				<s:Button id="btClear" label="X" 
						  click="clearFilter()" width="30"/>
				<s:Spacer height="10"/>
			</s:VGroup>
			<!--Filtro por categoria do produto-->
			<s:VGroup width="100%">
				<s:Label text="Filtrar por grupo:"/>
				<s:DropDownList id="ddCategory" width="144" change="filterHandler(event)"
								labelField="title" selectedItem="Todos"/>
			</s:VGroup>
			<!--Filtro por nome do produto-->
			<s:VGroup width="100%">
				<s:Label text="Filtrar por nome:"/>
				<s:HGroup width="100%">
					<s:TextInput id="tiProductName" width="131" enter="filterProductName()"/>
					<s:Button id="btFilter" width="15" label="Button" click="filterProductName()"/>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
</s:Group>
