<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:ui="devdoo.ui.*"
			   width="300" height="350"
			   creationComplete="create()"
			   close="cancel(event)">
	
	<fx:Script>
		<![CDATA[
			import devdoo.fx.UseDebug;
			import devdoo.fx.UseFX;
			import devdoo.fx.UseString;
			import devdoo.register.model.UseRegisterGroups;
			
			import modules.lg.data.DataProducts;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			
			//------------------------------------------------------------------
			//
			//  Attributes
			//
			//------------------------------------------------------------------
			//----------------------------------
			//  useFX
			//----------------------------------
			/**
			 *  Instância da classe de gerenciamento de módulo.  
			 */  
			public var useFX:UseFX;
			
			//----------------------------------
			//  this._dataProducts
			//----------------------------------
			/**
			 *  Gerênciador de dados de produtos.  
			 */  
			public var _dataProducts:DataProducts;
			
			//------------------------------------------------------------------
			//
			//  Methods
			//
			//------------------------------------------------------------------
			//----------------------------------
			//  create
			//----------------------------------
			/**
			 *  Evento executado no momento em que a aplicação for criada completamente.
			 * 
			 *  Recupera a instância da classe de gerenciamento da módulo, 
			 *  Popula os componentes pré-definidos,
			 *  Adiciona os eventos pré-definidos,
			 *  Configura permissão de acesso.
			 * 
			 *  @return void  
			 */
			private function create() : void
			{
				//Recupera a instância da classe de gerenciamento da popup
				useFX = UseFX.startPopup(this);
				
				//Cria gerenciador de dados de produto
				this._dataProducts = new DataProducts();
				
				//Popula os componentes pré-definidos
				populate();
				
				//Adiciona os eventos pré-definidos
				addEvents();				
				
				//Configura permissão de acesso
				accessControl();
			}
			
			//----------------------------------
			//  populate
			//----------------------------------
			/**
			 *  Popula os componentes pré-definidos.
			 * 
			 *  @return void  
			 */	
			private function populate():void
			{
				//Popula categoria
				lsSubCategory.dataProvider = useFX.session('lgSubCategory');
				UseDebug.p(lsSubCategory.dataProvider)
			}		
			
			//----------------------------------
			//  addEvents
			//----------------------------------
			/**
			 *  Adiciona eventos aos componentes pré-definidos.
			 * 
			 *  @return void
			 */	
			private function addEvents():void
			{
				btCancel.addEventListener(MouseEvent.CLICK, cancel);
				btAdd.addEventListener(MouseEvent.CLICK, addSubCategory);
				btEdit.addEventListener(MouseEvent.CLICK, editSubCategory);
				
				lsSubCategory.addEventListener(IndexChangeEvent.CHANGE, selectSubCategory);
			}
			
			//----------------------------------
			//  accessControl
			//----------------------------------    	
			/**
			 * Gerência o controle de acesso e uso de usuários no módulo.
			 *  
			 * @return void  
			 */	
			private function accessControl():void{
				useFX.accessControl(true)
					.accessControlAdd( btAdd );
				
				useFX.accessControl( lsSubCategory.selectedIndex > -1)
					 .accessControlEdit( btEdit );
					 //.accessControlRemove( btRemove );
			}
			
			//----------------------------------
			//  addSubCategory
			//----------------------------------    	
			/**
			 * 	Adiciona nova categoria na base de dados
			 * 
			 *  @return void  
			 */	
			private function addSubCategory(event:Event):void
			{
				this._dataProducts.useRegisterGroups = new UseRegisterGroups();
				this._dataProducts.useRegisterGroups.title =  UseString.trim(tiSubCategory.text);
				this._dataProducts.useRegisterGroups.description = taDescription.text;
				
				this._dataProducts.addEditSubCategory(false, addSubCategoryResult)
			}
			
			//----------------------------------
			//  addSubCategoryResult
			//----------------------------------
			/**
			 *  Evento disparado após interação com a base de dados.
			 * 
			 *  Configura a lista de categoria adicionando o último item registrado.  
			 *
			 *  @return void
			 */ 			
			private function addSubCategoryResult(useResult:Object):void
			{
				//Processa o resultado obtido, atualizando o modelo de tabela principal
				useResult = useFX.saveResult(this._dataProducts.useRegisterGroups, useResult);
				
				//Atualiza a lista de categorias em uso
				var lgCategory:ArrayCollection = useFX.session('lgSubCategory');
					lgCategory.addItemAt(useResult,0);
					lgCategory.refresh();
					
					tiSubCategory.text = null;
					taDescription.text = null;
			}	
			
			//----------------------------------
			//  editSubCategory
			//----------------------------------    	
			/**
			 * 	Edita uma categoria selecionada na base de dados.
			 * 
			 *  @return void  
			 */	
			private function editSubCategory(event:Event):void
			{
				this._dataProducts.useRegisterGroups = new UseRegisterGroups();
				this._dataProducts.useRegisterGroups.title =  UseString.trim(tiSubCategory.text);
				this._dataProducts.useRegisterGroups.description = taDescription.text;
				this._dataProducts.useRegisterGroups.id = lsSubCategory.selectedItem.id;
				
				this._dataProducts.addEditSubCategory(true, editSubCategoryResult)
			}
			
			
			//----------------------------------
			//  editSubCategoryResult
			//----------------------------------
			/**
			 *  Evento disparado após interação com a base de dados.
			 * 
			 *  Configura a lista de categoria atualizando o registro alterado.  
			 *
			 *  @return void
			 */ 			
			private function editSubCategoryResult(useResult:Object):void
			{
				//Processa o resultado obtido, atualizando o modelo de tabela principal
				useResult = useFX.saveResult(this._dataProducts.useRegisterGroups, useResult);
				
				//Atualiza a lista de categorias em uso
				var lgSubCategory:ArrayCollection = useFX.session('lgSubCategory');
					lgSubCategory.setItemAt(useResult, lgSubCategory.getItemIndex(lsSubCategory.selectedItem));
					lgSubCategory.refresh();
					
					
				tiSubCategory.text = null;
				taDescription.text = null;					
			}				
			
			//----------------------------------
			//  cancel
			//----------------------------------
			/**
			 *  Fecha a popup.
			 *  @return void
			 */ 		
			private function cancel(event:Event):void{
				useFX.closePopup(this);
			}			
			
			//----------------------------------
			//  selectSubCategory
			//----------------------------------
			/**
			 *  Seleciona a categoria para edição, exlusão.
			 *  @return void
			 */ 
			private function selectSubCategory(event:IndexChangeEvent):void
			{
				var selectedItem:Object = event.currentTarget.selectedItem;
					tiSubCategory.text = selectedItem.title; 
					taDescription.text = selectedItem.description;
					
					accessControl();
			}
			
		]]>
	</fx:Script>
	<s:List id="lsSubCategory" left="10" right="10" top="10" bottom="136" borderVisible="false"
			contentBackgroundAlpha="0" labelField="title"/>
	<s:BorderContainer left="0" right="0" bottom="0" backgroundColor="#272727">
		<s:layout>
			<s:HorizontalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
		</s:layout>
		<s:VGroup y="11" right="94" width="100%" gap="3">
			<s:Label fontSize="10" text="Categoria"/>
			<s:HGroup width="100%">
				<s:TextInput id="tiSubCategory" left="10" right="102" width="100%" verticalCenter="-39"/>
				<s:HGroup y="13" right="12">
					<s:Button id="btAdd" right="78" label="Button"
							  skinClass="devdoo.sk.button.iconMini.UiButtonAddSkin" 
							  verticalCenter="-38" toolTip="Adicionar nova categoria"/>
					<s:Button id="btEdit" right="50" label="Button"
							  skinClass="devdoo.sk.button.iconMini.UiButtonEditSkin" 
							  verticalCenter="-38" toolTip="Editar categoria selecionada"/>
					<s:Button id="btRemove" right="18" label="Button" enabled="false"
							  skinClass="devdoo.sk.button.iconMini.UiButtonRemoveSkin" 
							  verticalCenter="-38" toolTip="Remover categoria selecionada"/>
				</s:HGroup>
			</s:HGroup>
			<s:Label height="15" fontSize="10" text="Descrição" verticalAlign="bottom"/>
			<s:TextArea id="taDescription" x="10" y="40" width="100%" height="50"/>
		</s:VGroup>
		
		
	</s:BorderContainer>
	
	<s:controlBarContent>
		<!--NOTFINAL-->
		<s:Button id="btOrder" label="Ordenar" enabled="false"
				  skinClass="devdoo.sk.button.iconMini.UiButtonOrderSkin"
				  toolTip="Ordenar lista de categorias"/>
		
		<mx:Spacer width="100%"/>
		<s:Button label="Fechar" id="btCancel" styleName="btCancel"/>
	</s:controlBarContent>
	
</s:TitleWindow>